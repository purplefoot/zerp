! Basic unit tests to confirm zerp functionality
! 
! Pretty much everything is written in assembler here, to keep things
! as close to the virtual metal as possible.

Global g00 = 0;
Global g01 = 0;
Global g02 = 0;

[Main x;
    print "Zerp unit test suite v0.1^";
    print "^If you can see this then printing works.";
    print "^The sets are kept in routines for ease of maintainence - so CALL needs to work.^Testing CALL...";
    x = basic_call();
    print "Back in main. Routine should have returned 1, it returned ", x;
    print "^^Beginning tests.....^";
    branch_tests();
    simple_store_tests();
    local_tests();
    stack_tests();
    call_vars();
    check_inc_dec();
    @quit;
];

[basic_call;
    print "works.^";
    @rtrue;
];

[branch_tests;
    print "Testing branch instructions^";
    test_branch_je();
    test_branch_jl();
    test_branch_jg();
    test_branch_jz();
    test_branch_return();
];

[test_branch_je;
    print "Testing JE^";
    print "JE 1 1...";
    @je 1 1 ?ok;
    jump fail;
.ok;
    print "ok^";
    print "JE@@126 1 1...";
    @je 1 1 ?~fail;
    print "ok^";
    print "JE 1 2...";
    @je 1 2 ?fail;
    print "ok^";
    print "JE@@126 1 2...";
    @je 1 2 ?~ok2;
    jump fail;
.ok2;
    print "ok^";
    print "JE 1 1 2 3...";
    @je 1 1 2 3 ?ok3;
    jump fail;
.ok3;
    print "ok^";
    print "JE@@126 1 1 2 3...";
    @je 1 1 2 3 ?~fail;
    print "ok^";
    print "JE 3 1 2 3...";
    @je 3 1 2 3 ?ok4;
    jump fail;
.ok4;
    print "ok^";
    print "JE 1234 1234...";
    @je 1234 1234 ?ok5;
    jump fail;
.ok5;
    print "ok^";
    print "JE@@126 1234 1234...";
    @je 1234 1234 ?~fail;
    print "ok^";
    print "JE 1234 4321...";
    @je 1234 4321 ?fail;
    print "ok^";
    print "JE@@126 1234 4321...";
    @je 1234 4321 ?~ok6;
    jump fail;
.ok6;
    print "ok^";    
    rtrue;
.fail;
    print "fail^";
    rfalse;
];

[test_branch_jl;
    print "Testing JL^";
    print "JL 1 2...";
    @jl 1 2 ?ok;
    jump fail;
.ok;
    print "ok^";
    print "JL@@126 1 2...";
    @jl 1 2 ?~fail;
    print "ok^";
    print "JL 2 1...";
    @jl 2 1 ?fail;
    print "ok^";
    print "JL@@126 2 1...";
    @jl 2 1 ?~ok2;
    jump fail;
.ok2;
    print "ok^";
    print "JL 1 1...";
    @jl 1 1 ?fail;
    print "ok^";
    print "JL@@126 1 1...";
    @jl 1 1 ?~ok4;
    jump fail;
.ok4;
    print "ok^";
    print "JL -1 1...";
    @jl -1 1 ?ok5;
    jump fail;
.ok5;
    print "ok^";
    print "JL@@126 -1 1...";
    @jl -1 1 ?~fail;
    print "ok^";
    print "JL -1 32655...";
    @jl -1 32655 ?ok6;
    jump fail;
.ok6;
    print "ok^";
    print "JL@@126 -1 32655...";
    @jl -1 32655 ?~fail;
    print "ok^";
    rtrue;
.fail;
    print "fail^";
    rfalse;
];

[test_branch_jg;
    print "Testing JG^";
    print "JG 2 1...";
    @jg 2 1 ?ok;
    jump fail;
.ok;
    print "ok^";
    print "JG@@126 2 1...";
    @jg 2 1 ?~fail;
    print "ok^";
    print "JG 1 2...";
    @jg 1 2 ?fail;
    print "ok^";
    print "JG@@126 1 2...";
    @jg 1 2 ?~ok2;
    jump fail;
.ok2;
    print "ok^";
    print "JG 1 1...";
    @jg 1 1 ?fail;
    print "ok^";
    print "JG@@126 1 1...";
    @jg 1 1 ?~ok4;
    jump fail;
.ok4;
    print "ok^";
    print "JG -1 1...";
    @jg 1 (-1) ?ok5;
    jump fail;
.ok5;
    print "ok^";
    print "JG@@126 1 -1...";
    @jg 1 (-1) ?~fail;
    print "ok^";
    print "JG 32655 -1...";
    @jg 32655 (-1) ?ok6;
    jump fail;
.ok6;
    print "ok^";
    print "JG@@126 32655 -1...";
    @jg 32655 (-1) ?~fail;
    print "ok^";
    rtrue;
.fail;
    print "fail^";
    rfalse;
];

[test_branch_jz;
    print "Testing Jz^";
    print "JZ 0...";
    @jz 0 ?ok;
    jump fail;
.ok;
    print "ok^";
    print "JZ@@126 0...";
    @jz 0 ?~fail;
    print "ok^";
    rtrue;
.fail;
    print "fail^";
    rfalse;
];

[test_branch_return;
    print "Return true on branch...";
    g00 = branch_return_true();
    @je g00 1 ?~fail;
    print "ok^";
    print "Return false on branch...";
    g00 = branch_return_false();
    @je g00 0 ?~fail;
    print_ret "ok";
.fail;
    print "fail^";
    rfalse;
];

[branch_return_true;
    @je 1 1 ?rtrue;
    rfalse;
];

[branch_return_false;
    @je 1 1 ?rfalse;
    rtrue;
];

[simple_store_tests;
    print "Testing basic storage^";
    print "g00 = ", g00;
    new_line;
    print "STORE g00 ab...";
    @store g00 $ab;
    @je g00 $ab ?~fail;
    print "ok^";
    print "STORE g00 abab...";
    @store g00 $abab;
    @je g00 $abab ?~fail;
    print "ok^";
    print "LOAD g00 -> g01...";
    @load g00 -> g01;
    @je g00 g01 ?~fail;
    print "ok^";
    rtrue;
.fail;
    print "fail: ", g00;
    new_line;
    rfalse;
];

[local_tests a b c d e;
    print "testing locals^";
    @store g00 $aaaa;
    @store a 1;
    @store b $ff;
    @store c $ffff;
    @store d g00;
    print "a = 1...";
    @je a 1 ?~fail;
    print "ok^b = 0xff...";
    @je b $ff ?~fail;
    print "ok^c = 0xffff...";
    @je c $ffff ?~fail;
    print "ok^d = [G00]...";
    @je d $aaaa ?~fail;
    print "ok^";
    e = stack_locals();
    print "Should have returned 1 on success...";
    @je e 1 ?~fail;
    print "ok^Locals should be restored...^";
    print "a = 1...";
    @je a 1 ?~fail;
    print "ok^b = 0xff...";
    @je b $ff ?~fail;
    print "ok^c = 0xffff...";
    @je c $ffff ?~fail;
    print "ok^";
    rtrue;
.fail;
    print "fail^";
    rfalse;
];

[stack_locals x y z w;
    print "testing local in a new frame^Check defaults are zero...";
    @jz x ?~fail;
    @jz y ?~fail;
    @jz z ?~fail;
    print "ok^Write and read some new values...^";
    @store g01 $cccc;
    @store x 9;
    @store y $bb;
    @store z $eeee;
    @store w g01;
    print "x = 9...";
    @je x 9 ?~fail;
    print "ok^y = 0xbb...";
    @je y $bb ?~fail;
    print "ok^c = 0xffff...";
    @je z $eeee ?~fail;
    print "ok^w = [G00]...";
    @je w $cccc ?~fail;
    print "ok^";
    rtrue;
.fail;
    print "fail^";
    rfalse;
];

[stack_tests a;
    print "Testing stack^Store ops first...^Push values and pop them...";
    @store sp 1;
    @store sp 2;
    @store sp 3;
    @store sp 4;
    @je sp 4 ?~fail;
    @je sp 3 ?~fail;
    @je sp 2 ?~fail;
    @je sp 1 ?~fail;
    print "ok^Push a global...";
    g00 = $77;
    @store sp g00;
    @je sp $77 ?~fail;
    print "ok^Push a local...";
    a = $aa;
    @store sp a;
    @je sp $aa ?~fail;
    print "ok^Pop to a global...";
    g00 = 0;
    @store sp $88;
    @store g00 sp;
    @je g00 $88 ?~fail;
    print "ok^Pop to a local...";
    a = 0;
    @store sp $bb;
    @store a sp;
    @je a $bb ?~fail;
    print "ok^";
    print "Now push/pop...^Push values and pull them...";
    @push 1;
    @push 2;
    @push 3;
    @push 4;
    @je sp 4 ?~fail;
    @je sp 3 ?~fail;
    @je sp 2 ?~fail;
    @je sp 1 ?~fail;
    print "ok^Push a global...";
    g00 = $77;
    @push g00;
    @je sp $77 ?~fail;
    print "ok^Push a local...";
    a = $aa;
    @push a;
    @je sp $aa ?~fail;
    print "ok^Pop to a global...";
    g00 = 0;
    @push $88;
    @pull g00;
    @je g00 $88 ?~fail;
    print "ok^Pop to a local...";
    a = 0;
    @push $bb;
    @pull a;
    @je a $bb ?~fail;
    print "ok^Use pop to throw a value away...";
    @push $ff;
    @push $ee;
    @pop;
    @je sp $ff ?~fail;
    print "ok^";
    rtrue;
.fail;
    print "fail^";
    rfalse;
];

[call_vars a b c d;
    a = $aa; b = $bb; c = $cc; d = $dd;
    g00 = $aa; g01 = $bb; g02 = $cc;
    print "Testing call variable passing...^Passing small constants....";
    d = assert_call_vars1($aa,$bb,$cc);
    @jz d ?fail;
    print "ok^Passing large constants...";
    d = assert_call_vars2($aaaa, $bbbb, $cccc);
    @jz d ?fail;
    print "ok^Passing globals...";
    d = assert_call_vars1(g00, g01, g02);
    @jz d ?fail;
    print "ok^Passing locals...";
    d = assert_call_vars1(a, b, c);
    @jz d ?fail;
    print "ok^";
    rtrue;
.fail;
    print "fail^";
    rfalse;
];

[assert_call_vars1 a b c;
    @je a $aa ?~fail;
    @je b $bb ?~fail;
    @je c $cc ?~fail;
    rtrue;
.fail;
    rfalse;
];

[assert_call_vars2 a b c;
    @je a $aaaa ?~fail;
    @je b $bbbb ?~fail;
    @je c $cccc ?~fail;
    rtrue;
.fail;
    rfalse;
];

[check_inc_dec a;
    print "Testing inc/dec^INC...";
    a = 0;
    @inc a;
    @je a 1 ?~fail;
    @inc a; @inc a; @inc a;
    @je a 4 ?~fail;
    print "ok^Signed INC...";
    a = -1;
    @inc a;
    @jz a ?~fail;
    print "ok^DEC...";
    a = 4;
    @dec a;
    @je a 3 ?~fail;
    @dec a; @dec a; @dec a;
    @jz a ?~fail;
    print "ok^Signed DEC...";
    @dec a;
    @je a (-1) ?~fail;
    print "ok^INC_CHK...";
    a = -2;
    @inc_chk a 0 ?fail; ! -1
    @je a (-1) ?~fail;
    @inc_chk a 1 ?fail; ! 0
    @jz a ?~fail;
    @inc_chk a 2 ?fail; ! 1
    @je a 1 ?~fail;
    print "ok^DEC_CHK...";
    a = 2;
    @dec_chk a 1 ?fail; ! 1
    @je a 1 ?~fail;
    @dec_chk a 0 ?fail; ! 0
    @jz a ?~fail;
    @dec_chk a (-1) ?fail; ! -1
    @je a (-1) ?~fail;
    print "ok^";
    rtrue;
.fail;
    print "fail: ", a, "^";
    rfalse;
];